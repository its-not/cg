

//Experiment no. 1


#include<iostream>
#include<graphics.h>
#include<math.h>
using namespace std;
class scan
{
	int n,i,k;
	int x[10],y[10],xint[10];
	float dx,dy,slope[30];
	public:
	void slope1();
	void drawpoly();
};
void scan::drawpoly()
{
	cout<<"\nEnter number of edges- ";
	cin>>n;
	cout<<"\nEnter co-ordinates of "<<n<<"points- ";
	for(i=0;i<n;i++)
	{
		cout<<"\nPoint "<<i+1<<"- ";
		cin>>x[i];
		cin>>y[i];
	}
	x[n]=x[0];
	y[n]=y[0];
}
void scan::slope1()
{
	for(i=0;i<n;i++)
	line(x[i],y[i],x[i+1],y[i+1]);
	int temp;
	for(i=0;i<n;i++)
	{
		dy=y[i+1]-y[i];
		dx=x[i+1]-x[i];
		if(dy==0)
		slope[i]=1;
		else if(dx==0)
		slope[i]=0;
		else
		slope[i]=dx/dy;
	}
	for(int c=0;c<480;c++ )
	{
		k=0;
		for(i=0;i<n;i++)
		{
			if((y[i]<=c && y[i+1]>c) || (y[i]>c && y[i+1]<=c))
			{
				xint[k]=x[i]+slope[i]*(c-y[i]);
				k++;
			}
		}
		for(int j=0;j<k-1;j++)
		{
			for(i=0;i<k-1;i++)
			{
				if(xint[i]>xint[i+1])
				{
					temp=xint[i];
					xint[i]=xint[i+1];
					xint[i+1]=temp;
				}
			}
		}
		for(i=0;i<k;i=i+2)
		{
			setcolor(9);
			line(xint[i],c,xint[i+1],c);
			delay(100);
		}
	}
}
int main()
{
	int gd=DETECT,gm;
	
	scan s;
	s.drawpoly();
	initgraph(&gd,&gm,NULL);
	s.slope1();
	getch();
	closegraph();
	return 0;
}







//Experiment no. 2

#include<iostream>
#include<stdlib.h>
#include<math.h>
#include<graphics.h>
using namespace std;
 
typedef struct coordinate
{
	int x,y;
	char code[4];
}PT;
 
void drawwindow();
void drawline(PT p1,PT p2);
PT setcode(PT p);
int visibility(PT p1,PT p2);
PT resetendpt(PT p1,PT p2);
 
int main()
{
	int gd=DETECT,v,gm;
	PT p1,p2,p3,p4,ptemp;
	
	cout<<"\nEnter x1 and y1\n";
	cin>>p1.x>>p1.y;
	cout<<"\nEnter x2 and y2\n";
	cin>>p2.x>>p2.y;
	
	initgraph(&gd,&gm,NULL);
	drawwindow();
	delay(500);
	
	drawline(p1,p2);
	delay(500);
	cleardevice();
	
	delay(500);
	p1=setcode(p1);
	p2=setcode(p2);
	v=visibility(p1,p2);
	delay(500);
	
	switch(v)
	{
	case 0: drawwindow();
			delay(500);
			drawline(p1,p2);
			break;
	case 1:	drawwindow();
			delay(500);
			break;
	case 2:	p3=resetendpt(p1,p2);
			p4=resetendpt(p2,p1);
			drawwindow();
			delay(500);
			drawline(p3,p4);
			break;
	}
	
	delay(5000);
	closegraph();
	return 0;
}
 
void drawwindow()
{
	line(150,100,450,100);
	line(450,100,450,350);
	line(450,350,150,350);
	line(150,350,150,100);
}
 
void drawline(PT p1,PT p2)
{
	line(p1.x,p1.y,p2.x,p2.y);
}
 
PT setcode(PT p)	//for setting the 4 bit code
{
	PT ptemp;
	
	if(p.y<100)
		ptemp.code[0]='1';	//Top
	else
		ptemp.code[0]='0';
	
	if(p.y>350)
		ptemp.code[1]='1';	//Bottom
	else
		ptemp.code[1]='0';
		
	if(p.x>450)
		ptemp.code[2]='1';	//Right
	else
		ptemp.code[2]='0';
		
	if(p.x<150)
		ptemp.code[3]='1';	//Left
	else
		ptemp.code[3]='0';
	
	ptemp.x=p.x;
	ptemp.y=p.y;
	
	return(ptemp);
}
 
int visibility(PT p1,PT p2)
{
	int i,flag=0;
	
	for(i=0;i<4;i++)
	{
		if((p1.code[i]!='0') || (p2.code[i]!='0'))
			flag=1;
	}
	
	if(flag==0)
		return(0);
	
	for(i=0;i<4;i++)
	{
		if((p1.code[i]==p2.code[i]) && (p1.code[i]=='1'))
			flag='0';
	}
	
	if(flag==0)
		return(1);
	
	return(2);
}
 
PT resetendpt(PT p1,PT p2)
{
	PT temp;
	int x,y,i;
	float m,k;
	
	if(p1.code[3]=='1')
		x=150;
	
	if(p1.code[2]=='1')
		x=450;
	
	if((p1.code[3]=='1') || (p1.code[2]=='1'))
	{
		m=(float)(p2.y-p1.y)/(p2.x-p1.x);
		k=(p1.y+(m*(x-p1.x)));
		temp.y=k;
		temp.x=x;
		
		for(i=0;i<4;i++)
			temp.code[i]=p1.code[i];
		
		if(temp.y<=350 && temp.y>=100)
			return (temp);
	}
	
	if(p1.code[0]=='1')
		y=100;
	
	if(p1.code[1]=='1')
		y=350;
		
	if((p1.code[0]=='1') || (p1.code[1]=='1'))
	{
		m=(float)(p2.y-p1.y)/(p2.x-p1.x);
		k=(float)p1.x+(float)(y-p1.y)/m;
		temp.x=k;
		temp.y=y;
		
		for(i=0;i<4;i++)
			temp.code[i]=p1.code[i];
		
		return(temp);
	}
	else
		return(p1);
}







//Experiment no. 3
#include <graphics.h>
#include<iostream>
#include <math.h>
using namespace std;
void circlebres(float x1,float y1,float r)
{
	float x,y,p;
	x=0;
	y=r;
	p=3-(2*r); // initial decision parameter
	while(x<=y)
	{
		putpixel(x1+x,y1+y,WHITE); /* drawing pixel in each octant*/
		putpixel(x1-x,y1+y,WHITE);
		putpixel(x1+x,y1-y,WHITE);
		putpixel(x1-x,y1-y,WHITE);
		putpixel(x1+y,y1+x,WHITE);
		putpixel(x1+y,y1-x,WHITE);
		putpixel(x1-y,y1+x,WHITE);
		putpixel(x1-y,y1-x,WHITE);
	
		x=x+1;

		if(p<0)
		{
		   p=p+4*(x)+6;
		}
		else
		{
		   p=p+4*(x-y)+10;
		   y=y-1;
		}
		delay(40);
		}
		}


void drawline(int x1,int y1,int x2,int y2)
{
  int dx,dy,m,s;
  float xi,yi,x,y;
   dx = x2 - x1;
    dy = y2 - y1;

    if (abs(dx) > abs(dy))
       s = abs(dx);
    else
       s = abs(dy);

    xi = dx / (float) s;
    yi = dy / (float) s;

    x = x1;
    y = y1;

    putpixel(x1, y1, WHITE);

    for (m = 0; m < s; m++)
    {
       putpixel(x, y, WHITE);
       x += xi;
       y += yi;
      
    }
delay(500);
}

int main()
{
   int xc,yc,r;
   cout<<" enter center coordinates : ";
   cin>>xc>>yc;
   cout<<"enter redius : ";
   cin>>r;

   int gd=DETECT,gm=DETECT,x1,y1,x2,y2;
   initgraph(&gd,&gm,NULL);
   
   circlebres(xc,yc,r); //inside circle
   double height,side;

   //side=r/0.577;
   //height=1.73*side;
   
   side=1.73*r;
   height=1.73*side;

   drawline(xc-side,yc+r,xc+side,yc+r); //base line
   delay(300);
   drawline(xc-side,yc+r,xc,yc+r-height);// left line
   drawline(xc,yc+r-height,xc+side,yc+r); // right line
   circlebres(xc,yc,height-r);//outer circle

delay(3000);
   closegraph();
}







//Experiment no. 4


#include<iostream>
#include<math.h>
#include<graphics.h>
using namespace std;
class matrix
{
public:
    int n,i,j,tx,ty,k,sum,sx,sy;
    double a[6][3],b[6][3],mult[6][3],mat3[6][3];
    double p,q,r;
    double ang=0,angle=0;
public:
    void get()
       {
    cout<<"\n enter the number of vertices of polygon : ";
       cin>>n;
      // cout<<"n Entering user matix\n";
       for(i=0;i<n;i++)
       {
        cout<<"enter x n y co ordinates";
           cin>>b[i][0];
           cin>>b[i][1];
           b[i][2]=1;
       }
//display object matrix
       cout<<"\n original  co ordinates are"<<"\n";

       for(i=0;i<n;i++)
       {
           for(j=0;j<3;j++)
           {
               cout<<b[i][j]<<"\t";
           }cout<<"\n";
       }
       }
void identitymat()
{
for(i=0;i<n;i++)
        {
                for(j=0;j<3;j++)
                {
                    if(i==j)
                    {
                        a[i][j]=1;
                    }
                    else
                    {
                        a[i][j]=0;
                    }
                }
        }
}
    void trans()
    {
                
        cout<<"enter values of tx and ty";
        cin>>tx>>ty;
        a[2][0]=tx;
        a[2][1]=ty;
        cout<<"matrix is"<<"\n";
        for(i=0;i<n;i++)
        {
            for(j=0;j<3;j++)
            {
                cout<<a[i][j]<<"\t";
            }cout<<"\n";
        }
     }
    void scale()
    {
        cout<<"\n Enter the values of sx and sy";
        cin>>sx>>sy;
        a[0][0]=sx;
        a[1][1]=sy;
    cout<<"\n Matrix is:"<<"\n";
//To display scaling matrix
        for(i=0;i<3;i++)
        {
                for(j=0;j<3;j++)
        {
                        cout<<a[i][j]<<"\t";
        }cout<<"\n";
        }
    }
    void rot()
       {
        cout<<"Enter the angle";
       cin>>ang;
       angle=(ang*3.142)/180;
       q=sin(angle);
       p=cos(angle);
       r=-sin(angle);
       a[0][0]=p;
       a[0][1]=q;
       a[1][0]=r;
       a[1][1]=p;
       cout<<"tranformation matrix is"<<"\n";
       for(i=0;i<3;i++)
       {
           for(j=0;j<3;j++)
           {
               cout<<a[i][j]<<"\t";
           }cout<<"\n";
       }
       }
    void multi()
            {
                cout<<"\nMultiplying two matrices...";
                    for(i=0; i<n; i++)
                    {
                        for(j=0; j<3; j++)
                        {
                            sum=0;
                            for(k=0; k<3; k++)
                            {
                                sum = sum + b[i][k] * a[k][j];
                            }
                            mat3[i][j] = sum;
                        }
                    }
            }
            void display()
            {
                    cout<<"\nMultiplication of two Matrices : \n";
                    for(i=0; i<n; i++)
                    {
                        for(j=0; j<3; j++)
                        {
                            cout<<mat3[i][j]<<" ";
                        }
                        cout<<"\n";
                    }

int gd=DETECT,gm;
initgraph(&gd,&gm,NULL);
for(int i=0;i<n-1;i++)
{
    line(b[i][0],b[i][1],b[i+1][0],b[i+1][1]);
}
line(b[2][0],b[2][1],b[0][0],b[0][1]);
for(int i=0;i<n-1;i++)
{
    line(mat3[i][0],mat3[i][1],mat3[i+1][0],mat3[i+1][1]);
}
line(mat3[2][0],mat3[2][1],mat3[0][0],mat3[0][1]);
delay(5000);
closegraph();
            }
    };
int main()
{
    matrix g;
    int ch;
    char ans;
    g.get();
    g.identitymat();
    do
    {
cout<<"menu\n1.translation\n2.scaling\n3.rotation";   
    cin>>ch;
    switch(ch)
    {
    case 1:
        g.trans();
        g.multi();
        g.display();
        break;
    case 2:
        g.scale();
        g.multi();
        g.display();
        break;
    case 3:
        g.rot();
        g.multi();
        g.display();
        break;
    }cin>>ans;
    }while(ans=='Y'&& ans=='y');
return 0;
}



